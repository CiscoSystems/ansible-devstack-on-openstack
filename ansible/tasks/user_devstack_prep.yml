# Copyright 2014 Cisco Systems, Inc.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.
#
# @author: Juergen Brendel, Cisco Systems, Inc.

# -----------------------------------------------------------------------------
# Setup stack user's directory, download DevStack and prepare localrc.
# -----------------------------------------------------------------------------

---

# If we don't add the github.com key with this keyscan operation first, we will
# get an interactive block when the git module tries to establish an ssh connection
# to the server. The block is a prompt that asks us if we want to accept this
# unknown host. So, doing the scan first avoids this issue.
- name: Add the key for github.com to the known_host file
  shell: >
      ssh-keyscan -H github.com > {{ STACK_USER_HOME }}/.ssh/known_hosts
      creates={{ STACK_USER_HOME }}/.ssh/known_hosts

#
# Creation of working directories
#
- name: Remove any old workspace directories if they existed already
  shell: sudo rm -rf {{ WORKSPACE }}/*
  ignore_errors: True

- name: Create directory for our scripts and tempest run logs
  file: >
      path={{ SCRIPT_DIR }} state=directory
      owner={{ STACK_USER }}
      group={{ STACK_USER }}

- name: Create directory for logs
  file: >
      path={{ WORKSPACE }} state=directory
      owner={{ STACK_USER }}
      group={{ STACK_USER }}

#
# Copying of scripts to target machine
#
- name: Copy our scripts to the target
  copy: >
      src={{ LOCAL_FILES_DIR }}
      dest={{ SCRIPT_DIR }}
      owner={{ STACK_USER }}
      group={{ STACK_USER }}

#
# Creating environment file, if local sourcing should be
# needed for a manual run. This creates the 'temp_env' file,
# that a logged-in user can source. The environment itself
# is provided by Ansible directly to any scripts it runs
# (see the RUN_ENV definition and use).
#
- name: Create environment file based on our variables
  lineinfile: >
      dest={{ SCRIPT_DIR }}/temp_env
      line="export SCRIPT_HOME={{ SCRIPT_DIR }} WORKSPACE={{ WORKSPACE }}"
      create=yes
      state=present
      owner={{ STACK_USER }}
      group={{ STACK_USER }}
- lineinfile: >
      dest={{ SCRIPT_DIR }}/temp_env
      line="export GERRIT_REFSPEC={{ RUN_ENV.GERRIT_REFSPEC }} GERRIT_CHANGE_NUMBER={{ RUN_ENV.GERRIT_CHANGE_NUMBER }}"
- lineinfile: >
      dest={{ SCRIPT_DIR }}/temp_env
      line="export GERRIT_PATCHSET_NUMBER={{ RUN_ENV.GERRIT_PATCHSET_NUMBER }} BUILD_URL={{ RUN_ENV.BUILD_URL }}"
- lineinfile: >
      dest={{ SCRIPT_DIR }}/temp_env
      line="export GERRIT_NAME={{ RUN_ENV.GERRIT_NAME }} GERRIT_PROJECT={{ RUN_ENV.GERRIT_PROJECT }}"

#
# Checkout of git repository with specific ref
#
- name: Checkout DevStack from git repository
  shell: >
      git clone {{ GIT_REPO_URL }} {{ DEVSTACK_DOWNLOAD_DIR }}
      chdir={{ STACK_USER_HOME }}

- name: Change to stable version
  shell: >
      git checkout {{ DEVSTACK_VERSION }}
      chdir={{ DEVSTACK_DOWNLOAD_DIR }}

#
# Place a localrc file into the DevStack directory
#
- name: Prepare localrc file.
  template: >
      src={{ LOCAL_TEMPLATE_DIR }}/{{ TUNNEL_TYPE }}/{{ localrc_template_file }}
      dest={{ DEVSTACK_DOWNLOAD_DIR }}/localrc 
      owner={{ STACK_USER }}
      group={{ STACK_USER }}

